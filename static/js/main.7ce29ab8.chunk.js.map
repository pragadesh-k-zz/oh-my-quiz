{"version":3,"sources":["components/Header.js","components/PlayAgain.js","components/QuizBody.js","components/Form.js","components/Quiz.js","apps/QuizApp.js","reportWebVitals.js","index.js"],"names":["Header","props","className","PlayAgain","onClick","startNewQuiz","Question","dangerouslySetInnerHTML","__html","question","Timer","seconds","Option","setValue","option","style","backgroundColor","color","OptionSection","useState","value","setvalue","checkAnswer","correct_answer","options","map","key","QuizBody","console","log","data","amount","count","setcount","questionData","setquestionData","setSeconds","endGame","setEndGame","useEffect","timeOut","setTimeout","clearTimeout","incorrect_answers","nextQuestion","updated_options","Form","state","nQuestions","fetchData","event","a","preventDefault","fetch","response","json","alpha","results","forEach","element","shuffled_options","temp","random","Math","floor","length","push","splice","index","onSubmit","this","type","onChange","setState","target","required","min","React","Component","Quiz","gameState","gameData","handleSubmit","Number","finishGame","QuizApp","quiz","setQuiz","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ce29ab8.chunk.js","sourcesContent":["const Header = (props) => {\r\n  return (\r\n    <header>\r\n      <span className=\"fa fa-flag-checkered\"></span>\r\n      <p>Oh My Quiz!</p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","const PlayAgain = (props) => (\r\n  <div className=\"again\">\r\n    <p className=\"greet\">Nice Try!</p>\r\n    <button className=\"btn-playagain\" onClick={props.startNewQuiz}>\r\n      Play Again\r\n    </button>\r\n  </div>\r\n);\r\nexport default PlayAgain;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PlayAgain from \"./PlayAgain\";\r\nconst QuizBody = (props) => {\r\n  console.log(props.data);\r\n  const [count, setcount] = useState(props.amount);\r\n  const [questionData, setquestionData] = useState(props.data[count]);\r\n  const [seconds, setSeconds] = useState(20);\r\n  const [endGame, setEndGame] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setquestionData(props.data[count]);\r\n    console.log(\"useeffect runned\");\r\n\r\n    if (seconds > 0 && !endGame) {\r\n      let timeOut = setTimeout(() => {\r\n        setSeconds(seconds - 1);\r\n      }, 1000);\r\n      console.log(seconds);\r\n      return () => clearTimeout(timeOut);\r\n    }\r\n  }, [props.data, count, questionData.incorrect_answers, seconds, endGame]);\r\n\r\n  const nextQuestion = () => {\r\n    if (count > 0) {\r\n      setcount(count - 1);\r\n      setSeconds(20);\r\n    } else {\r\n      setEndGame(true);\r\n    }\r\n  };\r\n\r\n  if (seconds === 0 && !endGame) {\r\n    nextQuestion();\r\n    console.log(seconds);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {endGame ? (\r\n        <PlayAgain startNewQuiz={props.startNewQuiz} />\r\n      ) : (\r\n        <>\r\n          <Question question={questionData.question} />\r\n          <Timer seconds={seconds} />\r\n          <OptionSection\r\n            options={questionData.updated_options}\r\n            correct_answer={questionData.correct_answer}\r\n          />\r\n          <div className=\"next-section\">\r\n            <button className=\"btn-next\" onClick={nextQuestion}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Question = (props) => {\r\n  return (\r\n    <div className=\"question-box question\">\r\n      <p dangerouslySetInnerHTML={{ __html: props.question }}></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Timer = (props) => {\r\n  return (\r\n    <div className=\"timer-box\">\r\n      <div className=\"time-bar\">\r\n        <p className=\"seconds\">{props.seconds}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Option = (props) => {\r\n  return (\r\n    <div\r\n      className=\"option-box\"\r\n      onClick={() => props.setValue(props.option[1])}\r\n      style={{\r\n        backgroundColor: props.color,\r\n      }}\r\n    >\r\n      <div className={`badge ${props.option[0]}`}>{props.option[0]}</div>\r\n      <p\r\n        className=\"option-text\"\r\n        dangerouslySetInnerHTML={{ __html: props.option[1] }}\r\n      ></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst OptionSection = (props) => {\r\n  // console.log(\"updating option section\");\r\n  const [value, setvalue] = useState(\"\");\r\n  const checkAnswer = (value) => {\r\n    return value === props.correct_answer ? \"green\" : \"red\";\r\n  };\r\n  const color = {\r\n    white: \"white\",\r\n    red: \"red\",\r\n    green: \"green\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"option-section\">\r\n      {props.options.map((option, key) => (\r\n        <Option\r\n          key={key}\r\n          option={option}\r\n          color={option[1] === value ? checkAnswer(value) : \"white\"}\r\n          setValue={setvalue}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizBody;\r\n","import React from \"react\";\r\nclass Form extends React.Component {\r\n  state = {\r\n    nQuestions: 1,\r\n  };\r\n\r\n  fetchData = async (event) => {\r\n    event.preventDefault();\r\n    const response = await fetch(\r\n      `https://opentdb.com/api.php?amount=${this.state.nQuestions}&category=11&difficulty=easy&type=multiple`\r\n    );\r\n    const data = await response.json();\r\n    const alpha = [\"A\", \"B\", \"C\", \"D\"];\r\n    data.results.forEach((element) => {\r\n      let temp = [],\r\n        shuffled_options;\r\n      const random = Math.floor(\r\n        Math.random() * element.incorrect_answers.length\r\n      );\r\n      element.incorrect_answers.map((option) => temp.push(option));\r\n      temp.splice(random, 0, element.correct_answer);\r\n      shuffled_options = alpha.map((option, index) => [option, temp[index]]);\r\n      element[\"updated_options\"] = shuffled_options;\r\n    });\r\n    this.props.onSubmit(this.state.nQuestions, data.results);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.fetchData}>\r\n        <input\r\n          type=\"number\"\r\n          value={this.state.nQuestions}\r\n          onChange={(event) =>\r\n            this.setState({ nQuestions: event.target.value })\r\n          }\r\n          required={true}\r\n          min=\"1\"\r\n          className=\"input-ques\"\r\n        />\r\n        <button className=\"btn-start\">Start Quiz.</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Form;\r\n","import React from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport QuizBody from \"./QuizBody\";\r\nimport Form from \"../components/Form\";\r\n\r\nclass Quiz extends React.Component {\r\n  state = {\r\n    gameState: false,\r\n    nQuestions: 0,\r\n    gameData: [],\r\n  };\r\n  handleSubmit = (nQuestions, gameData) => {\r\n    this.setState({\r\n      gameState: true,\r\n      nQuestions: Number(nQuestions),\r\n      gameData,\r\n    });\r\n  };\r\n\r\n  // nextQues = (props) => {\r\n  //   this.setState({\r\n  //     nQuestions: this.state.nQuestions - 1,\r\n  //   });\r\n\r\n  // };\r\n\r\n  finishGame = () => {\r\n    this.setState({\r\n      gameState: false,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"quiz mounted\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        {!this.state.gameState && this.state.nQuestions === 0 ? (\r\n          <Form onSubmit={this.handleSubmit} />\r\n        ) : null}\r\n        {this.state.gameState && this.state.nQuestions > 0 ? (\r\n          <QuizBody\r\n            data={this.state.gameData}\r\n            // nextQues={this.nextQues}\r\n            amount={this.state.nQuestions - 1}\r\n            startNewQuiz={this.props.startNewQuiz}\r\n          />\r\n        ) : null}\r\n\r\n        {/* {!this.state.gameState ? (\r\n          <Form onSubmit={this.handleSubmit} />\r\n        ) : (\r\n          <QuizBody\r\n            data={this.state.gameData}\r\n            // nextQues={this.nextQues}\r\n            amount={this.state.nQuestions - 1}\r\n            startNewQuiz={this.props.startNewQuiz}\r\n            finishGame={this.finishGame}\r\n          />\r\n        )} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Quiz;\r\n","import React from \"react\";\r\nimport \"./QuizApp.css\";\r\nimport Quiz from \"../components/Quiz\";\r\n// API https://opentdb.com/api.php?amount=1&category=11&difficulty=easy&type=multiple\r\n\r\nconst QuizApp = (props) => {\r\n  const [quiz, setQuiz] = React.useState(0);\r\n  const startNewQuiz = (props) => {\r\n    setQuiz(quiz + 1);\r\n  };\r\n  return (\r\n    <div>\r\n      <Quiz key={quiz} startNewQuiz={startNewQuiz} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// const QuizApp = () => {\r\n//   const [seconds, setSeconds] = React.useState(10);\r\n//   React.useEffect(() => {\r\n//     if (seconds > 5) {\r\n//       let time = setTimeout(() => {\r\n//         setSeconds(seconds - 1);\r\n//       }, 1000);\r\n//       console.log(\"running settimeout\");\r\n//       return () => {\r\n//         clearTimeout(time);\r\n//         console.log(\"render first,before re-render\");\r\n//       };\r\n//     }\r\n//   });\r\n\r\n//   return <div>{seconds}</div>;\r\n// };\r\n\r\nexport default QuizApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./apps/QuizApp\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}